import Link from "next/link";
import Head from "next/head";
import dynamic from "next/dynamic";

import Image from "next/image";

import neckleces from "../assets/neckleces.png";
import gold from "../assets/gold.png";

import { storeFrontRequest } from "../utils/shopify";

export default function Home({ products, collections }) {
  const Product = dynamic(() => import("../components/ProductCard"), {
    ssr: false,
  });

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* Home Page */}
      <main className="home">
        {/* Banner */}
        <div className="banner">
          <div className="banner-cont">
            <h1>
              Fine Jewelry, Born And <br /> Raised In New Jersey
            </h1>
            <Link href="/">Shop Now</Link>
          </div>
        </div>

        {/* Collection */}
        <div className="collections">
          <div className="collections-wrapper">
            <h2>Discover a World of Jewelry</h2>
            <div className="collection-wrapper">
              {/* Map over Storefront API to get collections */}
              {/* Default Image since no images in playground store */}
              {collections.edges.map((item) => {
                const collection = item.node;
                return (
                  <div key={collection.id}>
                    <div className="collection">
                      <Image src={neckleces} alt="" />
                      <h4>{collection.title}</h4>
                    </div>
                  </div>
                );
              })}
            </div>
          </div>
        </div>

        {/* Products */}
        <div className="product-collection">
          <div className="product-collection-wrapper">
            <h2>Trending Gift</h2>
            <div className="products-wrapper">
              {/* Map over Storefront API to get products */}
              {products.edges.map((item) => {
                const product = item.node;
                const image = product.images.edges[0].node;
                return (
                  <Link
                    href={"/" + product.handle}
                    key={product.id}
                    passHref={true}
                  >
                    <a>
                      <Product
                        img={image.transformedSrc}
                        title={product.title}
                        price={
                          product.priceRange.minVariantPrice.amount + " lv."
                        }
                      />
                    </a>
                  </Link>
                );
              })}
            </div>
          </div>
        </div>

        {/* Features */}
        <div className="features">
          <div className="features-wrapper">
            <div className="feature">
              <Image src={gold} alt="" />
              <p>Solid gold jewelry</p>
            </div>
            <div className="feature">
              <Image src={gold} alt="" />
              <p>Solid gold jewelry</p>
            </div>
            <div className="feature">
              <Image src={gold} alt="" />
              <p>Solid gold jewelry</p>
            </div>

            <div className="feature">
              <Image src={gold} alt="" />
              <p>Solid gold jewelry</p>
            </div>
            <div className="feature">
              <Image src={gold} alt="" />
              <p>Solid gold jewelry</p>
            </div>
            <div className="feature">
              <Image src={gold} alt="" />
              <p>Solid gold jewelry</p>
            </div>
          </div>
        </div>
      </main>
    </div>
  );
}

// Fetch API and store in props
export async function getStaticProps() {
  // Fetch 5 products
  const products = await storeFrontRequest({
    query: `{
      products(first: 9) {
        edges {
          node {
            id
            title
            handle
            priceRange {
              minVariantPrice {
                amount
              }
            }
            images(first: 1) {
              edges {
                node {
                  transformedSrc
                  altText
                }
              }
            }
          }
        }
      }
    }`,
    variables: {},
  });

  // Fetch all collections
  const collections = await storeFrontRequest({
    query: `{
      collections(first: 10) {
        edges {
          node {
            id
            title
          }
        }
      }
    }`,
    variables: {},
  });

  return {
    props: {
      products: products.data.products,
      collections: collections.data.collections,
    },
  };
}
